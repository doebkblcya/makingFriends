"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tcn=@w#uodn)$2c_2&xbaf0kbd)hiepvt04=mjywv8(0e@6zcd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django 默认应用
    'django.contrib.admin',         # Django 管理后台
    'django.contrib.auth',           # Django 用户认证系统
    'django.contrib.contenttypes',  # Django 内容类型框架（用于跟踪模型之间的关系）
    'django.contrib.sessions',      # Django 会话框架
    'django.contrib.messages',      # Django 消息框架
    'django.contrib.staticfiles',   # Django 静态文件管理框架

    # 第三方应用
    'rest_framework',               # Django REST Framework（用于构建 API）
    'rest_framework.authtoken',     # REST Framework Token 认证模块（用于用户认证和令牌管理）
    'corsheaders',                  # 跨域资源共享（CORS）处理（用于允许跨域请求）

    # 自定义应用
    'user',                         # 用户相关模块
]


MIDDLEWARE = [
    # 跨域资源共享 (CORS) 处理，允许跨域请求
    'corsheaders.middleware.CorsMiddleware',  # 必须放在其他中间件之前，确保跨域请求的正确处理

    # Django 默认中间件
    'django.middleware.security.SecurityMiddleware',  # 安全相关的中间件（如启用 HTTPS）
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话管理，允许使用会话框架
    'django.middleware.common.CommonMiddleware',  # 一些常见的中间件功能，如 URL 重定向、头部处理等
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF 防护，防止跨站请求伪造攻击
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 认证中间件，处理用户登录状态
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息框架中间件，处理用户消息的存储和传递
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 防止点击劫持攻击，限制页面的框架嵌入
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db',
        'USER': 'root',
        'PASSWORD': 'sqh2003',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 自定义用户模型，指定用户模型为 `user` 应用中的 `CustomUser`
AUTH_USER_MODEL = 'user.CustomUser'  # 这里将 Django 默认的用户模型替换为自定义的 `CustomUser` 模型

# Django REST Framework 配置
REST_FRAMEWORK = {
    # 默认的认证类：这里使用的是 Token 认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # 通过 Token 进行认证，每个请求需要提供有效的 Token
    ],
}

# 跨域资源共享 (CORS) 配置
CORS_ALLOW_ALL_ORIGINS = True  # 允许所有源（跨域）访问 API，这在开发阶段很方便，但生产环境应根据需要限制源

# 明确允许的跨域源
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',  # 允许来自本地开发环境的 Vue 前端的请求
]

# 指定媒体文件存储的根目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 上传的文件将存储在项目根目录下的 `media` 文件夹中

# 指定媒体文件的 URL 路径前缀
MEDIA_URL = '/media/'  # 访问媒体文件时，URL 将以 `/media/` 开头